from flask import Flask, request, jsonify
import requests

app = Flask(__name__)

# üîë –¢–æ–∫–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_BOT_TOKEN = "7788946008:AAGULYh-GIkpr-GA3ZA70ERdCAT6BcGNW-g"
CHAT_ID = "-1002307069728"
TRELLO_API_KEY = "5880197335c3d727693408202c68375d"
TRELLO_TOKEN = "ATTA1ea4c6edf0b2892fec32580ab1417a42f521cd70c11af1453ddd0a4956e72896C175BE4E"
TRELLO_BOARD_ID = "67c19cc6cd0d960e2398be79"
TRELLO_LIST_ID = "67c19cd6641117e44ae95227"  # ID —Å–ø–∏—Å–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—â–µ–º –∫–∞—Ä—Ç–æ—á–∫—É

TRELLO_URL = "https://api.trello.com/1"
HEADERS = {"Accept": "application/json"}

# üìå –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": CHAT_ID, "text": message, "parse_mode": "Markdown"}
    requests.post(url, data=data)

# üìå –§—É–Ω–∫—Ü–∏—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ (–≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è)
@app.route("/archive_card", methods=["POST"])
def archive_card():
    data = request.json
    name = data.PATCH("name", "").strip()  # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤

    if not name:
        return "error: –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏", 400  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç

    # 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Å–ø–∏—Å–∫–µ
    cards_response = requests.get(
        f"{TRELLO_URL}/lists/{TRELLO_LIST_ID}/cards",
        params={"key": TRELLO_API_KEY, "token": TRELLO_TOKEN},
        headers=HEADERS
    )

    if cards_response.status_code != 200:
        return "error: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫", 500

    cards = cards_response.json()

    # üîç –í—ã–≤–æ–¥ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤)
    print("üìå –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Å–ø–∏—Å–∫–µ:")
    for card in cards:
        print(f"- {card['name']} (ID: {card['id']})")

    # 2Ô∏è‚É£ –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ –∏–º–µ–Ω–∏ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä –∏ –ø—Ä–æ–±–µ–ª—ã)
    card_to_archive = next(
        (c for c in cards if c["name"].strip().lower() == name.lower()), None
    )

    if not card_to_archive:
        return "error: –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 404

    card_id = card_to_archive["id"]

    # 3Ô∏è‚É£ –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É (–∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—ë)
    archive_response = requests.put(
        f"{TRELLO_URL}/cards/{card_id}",
        params={"closed": "true", "key": TRELLO_API_KEY, "token": TRELLO_TOKEN},
        headers=HEADERS
    )

    if archive_response.status_code == 200:
        send_telegram_message(f"üìÇ *–ö–∞—Ä—Ç–æ—á–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞*\nüìå –ò–º—è: {name}")
        return f"success: –ö–∞—Ä—Ç–æ—á–∫–∞ '{name}' –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞", 200  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç
    else:
        return "error: –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏", 500

# üìå –ì–∞—Ä–∞–Ω—Ç–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
@app.errorhandler(500)
@app.errorhandler(400)
@app.errorhandler(404)
def handle_error(e):
    return f"error: {str(e)}", e.code  # –í—Å–µ–≥–¥–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
