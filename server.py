from flask import Flask, request
import requests

app = Flask(__name__)

# üîë –¢–æ–∫–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_BOT_TOKEN = "7788946008:AAF8mtYczEkg_O_1iVwmieQPhZoHBUpLz2Q"
CHAT_ID = "-1002307069728"
TRELLO_API_KEY = "5880197335c3d727693408202c68375d"
TRELLO_TOKEN = "ATTA1ea4c6edf0b2892fec32580ab1417a42f521cd70c11af1453ddd0a4956e72896C175BE4E"
TRELLO_BOARD_ID = "67c19cc6cd0d960e2398be79"
TRELLO_LIST_ID = "67c19cd6641117e44ae95227"

TRELLO_URL = "https://api.trello.com/1"
HEADERS = {"Accept": "application/json"}

# üìå –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": CHAT_ID, "text": message, "parse_mode": "Markdown"}
    requests.post(url, data=data)

# üìå –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ Trello
@app.route("/archive_card", methods=["PATCH"])
def archive_card():
    data = request.json
    name = data.get("name")

    if not name:
        return "error: –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏", 400

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –Ω—É–∂–Ω–æ–º —Å–ø–∏—Å–∫–µ
    cards_response = requests.get(f"{TRELLO_URL}/lists/{TRELLO_LIST_ID}/cards",
                                  params={"key": TRELLO_API_KEY, "token": TRELLO_TOKEN}, headers=HEADERS)

    if cards_response.status_code != 200:
        return "error: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫", 500

    cards = cards_response.json()
    card = next((c for c in cards if c["name"] == name), None)

    if not card:
        return "error: –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 404

    card_id = card["id"]

    # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    archive_response = requests.put(f"{TRELLO_URL}/cards/{card_id}/closed",
                                    params={"value": "true", "key": TRELLO_API_KEY, "token": TRELLO_TOKEN},
                                    headers=HEADERS)

    if archive_response.status_code == 200:
        send_telegram_message(f"üì¶ *–ö–∞—Ä—Ç–æ—á–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞*\nüìå –ò–º—è: {name}")
        return f"success: –ö–∞—Ä—Ç–æ—á–∫–∞ '{name}' –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞", 200
    else:
        return "error: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏", 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
